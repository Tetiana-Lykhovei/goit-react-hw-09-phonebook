{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","views/ContactsView.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","ContactForm","dispatch","useDispatch","useState","name","setName","number","setNumber","contacts","useSelector","contactsSelectors","getAllContacts","handleInputChange","useCallback","ev","currentTarget","console","error","handleSubmit","preventDefault","find","item","toLowerCase","alert","contactsOperations","addContact","resetForm","className","s","container","onSubmit","label","type","onChange","formInput","ContactList","contactList","getFilteredContacts","isLaodingContacts","getIsLoading","useEffect","fetchContacts","list","map","id","btn","onClick","deleteContact","onDeleteContact","Filter","filterValue","getFilter","onToFilter","changeFilter","target","filter","defaultProps","ContactsView"],"mappings":"8LAIe,SAASA,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,K,oBIJtGC,EAAOC,QAAU,CAAC,QAAU,+B,oBCA5BD,EAAOC,QAAU,CAAC,QAAU,6BAA6B,IAAM,2B,oBCA/DD,EAAOC,QAAU,CAAC,QAAU,0B,qGCKb,SAASC,IACtB,IAAMC,EAAWC,cADmB,EAEZC,mBAAS,IAFG,mBAE7BC,EAF6B,KAEvBC,EAFuB,OAGRF,mBAAS,IAHD,mBAG7BG,EAH6B,KAGrBC,EAHqB,KAI9BC,EAAWC,YAAYC,IAAkBC,gBAEzCC,EAAoBC,uBAAY,SAACC,GAAQ,IAAD,EACpBA,EAAGC,cAAnBX,EADoC,EACpCA,KAAMX,EAD8B,EAC9BA,MAEd,OAAQW,GACN,IAAK,OACHC,EAAQZ,GACR,MACF,IAAK,SACHc,EAAUd,GACV,MACF,QACEuB,QAAQC,MAAM,YAEjB,IAEGC,EAAeL,uBACnB,SAACC,GACCA,EAAGK,iBAEmBX,EAASY,MAC7B,SAACC,GAAD,OAAUA,EAAKjB,KAAKkB,gBAAkBlB,EAAKkB,iBAG3CC,MAAM,GAAD,OAAInB,EAAJ,oLAIPH,EAASuB,IAAmBC,WAAW,CAAErB,OAAME,YAC/CoB,OAEF,CAACzB,EAAUG,EAAME,IAGboB,EAAY,WAChBrB,EAAQ,IACRE,EAAU,KAGZ,OACE,uBAAMoB,UAAWC,IAAEC,UAAWC,SAAUZ,EAAxC,UACE,wBAAOS,UAAWC,IAAEG,MAApB,iBAEE,uBACEC,KAAK,OACL5B,KAAK,OACLX,MAAOW,EACP6B,SAAUrB,EACVe,UAAWC,IAAEM,eAGjB,wBAAOP,UAAWC,IAAEG,MAApB,kBAEE,uBACEC,KAAK,OACL5B,KAAK,SACLX,MAAOa,EACP2B,SAAUrB,EACVe,UAAWC,IAAEM,eAGjB,wBAAQF,KAAK,SAAb,4B,sBCnES,SAASG,IACtB,IAAMlC,EAAWC,cACXkC,EAAc3B,YAAYC,IAAkB2B,qBAC5CC,EAAoB7B,YAAYC,IAAkB6B,cAExDC,qBAAU,WACRvC,EAASuB,IAAmBiB,mBAC3B,CAACxC,IAMJ,OACE,qCACGqC,GAAqB,2CACtB,oBAAIX,UAAWC,IAAEc,KAAjB,SACGN,EAAYO,KAAI,gBAAGC,EAAH,EAAGA,GAAIxC,EAAP,EAAOA,KAAME,EAAb,EAAaA,OAAb,OACf,qBAAIqB,UAAWC,IAAEP,KAAjB,UACE,8BAAIjB,EAAJ,QADF,IACkB,4BAAIE,IACpB,wBACEqB,UAAWC,IAAEiB,IACbb,KAAK,SACLc,QAAS,kBAdG,SAACF,GACvB3C,EAASuB,IAAmBuB,cAAcH,GAAK,IAatBI,CAAgBJ,IAHjC,sBAF0BA,W,sBCjBvB,SAASK,IACtB,IAAMhD,EAAWC,cACXgD,EAAczC,YAAYC,IAAkByC,WAC5CC,EAAavC,uBAAY,SAACC,GAAD,OAC7Bb,EAASoD,YAAavC,EAAGwC,OAAO7D,WAGlC,OACE,sBAAMkC,UAAWC,IAAEC,UAAnB,SACE,wBAAOF,UAAWC,IAAE2B,OAApB,kCACwB,IACtB,uBACEvB,KAAK,OACLvC,MAAOyD,EACPjB,SAAUmB,EACVzB,UAAWC,IAAEM,iBAMvBe,EAAOO,aAAe,CACpBN,YAAa,GACbE,WAAY,cCbCK,UAXM,WACnB,OACE,qCACE,2CACA,cAACzD,EAAD,IACA,cAACiD,EAAD,IACA,cAACd,EAAD","file":"static/js/3.bbc9594f.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ContactForm_wrapper__-JDpe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"element\":\"ContactList_element__NfP0V\",\"btn\":\"ContactList_btn__2GIPS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Filter_wrapper__i9r2n\"};","import React, { useState, useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { contactsOperations, contactsSelectors } from \"../../redux/contacts\";\r\n\r\nimport s from \"./ContactForm.module.css\";\r\n\r\nexport default function ContactForm() {\r\n  const dispatch = useDispatch();\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n  const contacts = useSelector(contactsSelectors.getAllContacts);\r\n\r\n  const handleInputChange = useCallback((ev) => {\r\n    const { name, value } = ev.currentTarget;\r\n\r\n    switch (name) {\r\n      case \"name\":\r\n        setName(value);\r\n        break;\r\n      case \"number\":\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        console.error(\"Ooops\");\r\n    }\r\n  }, []);\r\n\r\n  const handleSubmit = useCallback(\r\n    (ev) => {\r\n      ev.preventDefault();\r\n\r\n      const uniqueContact = contacts.find(\r\n        (item) => item.name.toLowerCase() === name.toLowerCase()\r\n      );\r\n      if (uniqueContact) {\r\n        alert(`${name} уже есть в списке ваших контактов`);\r\n        return;\r\n      }\r\n\r\n      dispatch(contactsOperations.addContact({ name, number }));\r\n      resetForm();\r\n    },\r\n    [dispatch, name, number]\r\n  );\r\n\r\n  const resetForm = () => {\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <form className={s.container} onSubmit={handleSubmit}>\r\n      <label className={s.label}>\r\n        Name\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={handleInputChange}\r\n          className={s.formInput}\r\n        />\r\n      </label>\r\n      <label className={s.label}>\r\n        Phone\r\n        <input\r\n          type=\"text\"\r\n          name=\"number\"\r\n          value={number}\r\n          onChange={handleInputChange}\r\n          className={s.formInput}\r\n        />\r\n      </label>\r\n      <button type=\"submit\">Add contact</button>\r\n    </form>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { contactsOperations, contactsSelectors } from \"../../redux/contacts\";\r\nimport s from \"./ContactList.module.css\";\r\n\r\nexport default function ContactList() {\r\n  const dispatch = useDispatch();\r\n  const contactList = useSelector(contactsSelectors.getFilteredContacts);\r\n  const isLaodingContacts = useSelector(contactsSelectors.getIsLoading);\r\n\r\n  useEffect(() => {\r\n    dispatch(contactsOperations.fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  const onDeleteContact = (id) => {\r\n    dispatch(contactsOperations.deleteContact(id), []);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isLaodingContacts && <h1>Loading..</h1>}\r\n      <ul className={s.list}>\r\n        {contactList.map(({ id, name, number }) => (\r\n          <li className={s.item} key={id}>\r\n            <p>{name}: </p> <p>{number}</p>\r\n            <button\r\n              className={s.btn}\r\n              type=\"button\"\r\n              onClick={() => onDeleteContact(id)}\r\n            >\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n","import React, { useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { contactsSelectors, changeFilter } from \"../../redux/contacts\";\r\nimport s from \"./Filter.module.css\";\r\n\r\nexport default function Filter() {\r\n  const dispatch = useDispatch();\r\n  const filterValue = useSelector(contactsSelectors.getFilter);\r\n  const onToFilter = useCallback((ev) =>\r\n    dispatch(changeFilter(ev.target.value))\r\n  );\r\n\r\n  return (\r\n    <form className={s.container}>\r\n      <label className={s.filter}>\r\n        Find contacts by name{\" \"}\r\n        <input\r\n          type=\"text\"\r\n          value={filterValue}\r\n          onChange={onToFilter}\r\n          className={s.formInput}\r\n        />\r\n      </label>\r\n    </form>\r\n  );\r\n}\r\nFilter.defaultProps = {\r\n  filterValue: \"\",\r\n  onToFilter: () => {},\r\n};\r\n\r\nFilter.propTypes = {\r\n  filterValue: PropTypes.string,\r\n  onToFilter: PropTypes.func,\r\n};\r\n","import React from \"react\";\r\nimport ContactForm from \"../components/ContactForm\";\r\nimport ContactList from \"../components/ContactList\";\r\nimport Filter from \"../components/Filter\";\r\n\r\nconst ContactsView = () => {\r\n  return (\r\n    <>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n      <Filter />\r\n      <ContactList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactsView;\r\n"],"sourceRoot":""}